#!/usr/bin/env python
# Copyright (c) 2014 Sine Nomine Associates
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THE SOFTWARE IS PROVIDED 'AS IS' AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

import sys
import getopt
import os

root = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
sys.path.append(root)
sys.path.append(os.path.join(root, "libraries"))
sys.path.append(os.path.join(root, "resources", "dist"))

from OpenAFSLibrary import OpenAFSLibrary

# Load local and "dist" settings.
try:
    import settings
except ImportError:
    sys.stderr.write("Please run afs-robotest-setup.\n")
    sys.exit(1)

dist = __import__(getattr(settings, 'AFS_DIST'))

# Set the shared object path for master branch testing.
if getattr(settings, 'AFS_DIST') == "transarc":
    os.environ['LD_LIBRARY_PATH'] = '/usr/afs/lib'

def usage():
    print "usage: afs-robotest-login [<user>]"

def get_var(name):
    """Simulate variable lookup."""
    if name == 'SITE':
        return os.path.join(root, 'site')
    value = getattr(settings, name)
    if value is not None:
        return value
    value = getattr(dist, name)
    if value is not None:
        return value
    raise AssertionError("Setting '%s' not found.\n" % (name))

def main(args):
    try:
        opts, args = getopt.getopt(args, "h", ["help"])
    except getopt.GetoptError as err:
        sys.stderr.write("%s\n" % str(err))
        usage()
        sys.exit(2)
    for o, a in opts:
        if o in ("-h", "--help"):
            usage()
            sys.exit(0)
        else:
            raise AssertionError("Unhandled option: '%s'" % o)
    if len(args) == 1:
        user = args[0]
    else:
        user = settings.AFS_ADMIN


    OpenAFSLibrary().login(user)
    sys.exit(0)

if __name__ == "__main__":
    main(sys.argv[1:])
